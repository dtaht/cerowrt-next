diff --git a/arch/mips/include/asm/checksum.h b/arch/mips/include/asm/checksum.h
index 9be4201..dce734c 100644
--- a/arch/mips/include/asm/checksum.h
+++ b/arch/mips/include/asm/checksum.h
@@ -99,7 +99,7 @@ static inline __sum16 csum_fold(__wsum sum)
  *	By Jorge Cwik <jorge@laser.satlink.net>, adapted for linux by
  *	Arnt Gulbrandsen.
  */
-static inline __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
+static inline __sum16 ip_fast_csum_unaligned(const void *iph, unsigned int ihl)
 {
 	const unsigned int *word = iph;
 	const unsigned int *stop = word + ihl;
@@ -134,6 +134,40 @@ static inline __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
 	return csum_fold(csum);
 }
 
+static inline __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
+{
+	const unsigned int *word = iph;
+	const unsigned int *stop = word + ihl;
+	unsigned int csum;
+	int carry;
+
+	if ((unsigned int) iph & 3)
+		return ip_fast_csum_unaligned(iph,ihl);
+
+	csum = word[0];
+	csum += word[1];
+	carry = (csum < word[1]);
+	csum += carry;
+
+	csum += word[2];
+	carry = (csum < word[2]);
+	csum += carry;
+
+	csum += word[3];
+	carry = (csum < word[3]);
+	csum += carry;
+
+	word += 4;
+	do {
+		csum += *word;
+		carry = (csum < *word);
+		csum += carry;
+		word++;
+	} while (word != stop);
+
+	return csum_fold(csum);
+}
+
 static inline __wsum csum_tcpudp_nofold(__be32 saddr,
 	__be32 daddr, unsigned short len, unsigned short proto,
 	__wsum sum)
@@ -197,14 +231,15 @@ static inline __sum16 ip_compute_csum(const void *buff, int len)
 	return csum_fold(csum_partial(buff, len, 0));
 }
 
-#define _HAVE_ARCH_IPV6_CSUM
-static __inline__ __sum16 csum_ipv6_magic(const struct in6_addr *saddr,
+#define _HAVE_ARCH_IPV6_CSUM_ALIGNED
+static __inline__ __sum16 csum_ipv6_magic_aligned(
+					  const struct in6_addr *saddr,
 				          const struct in6_addr *daddr,
 					  __u32 len, unsigned short proto,
 					  __wsum sum)
 {
 	__asm__(
-	"	.set	push		# csum_ipv6_magic\n"
+	"	.set	push		# csum_ipv6_magic_aligned\n"
 	"	.set	noreorder	\n"
 	"	.set	noat		\n"
 	"	addu	%0, %5		# proto (long in network byte order)\n"
diff --git a/include/linux/icmp.h b/include/linux/icmp.h
index 474f2a5..0e0fca0 100644
--- a/include/linux/icmp.h
+++ b/include/linux/icmp.h
@@ -80,7 +80,7 @@ struct icmphdr {
 		__be16	mtu;
 	} frag;
   } un;
-};
+} __packed;
 
 #ifdef __KERNEL__
 #include <linux/skbuff.h>
diff --git a/include/linux/icmpv6.h b/include/linux/icmpv6.h
index ba45e6b..5bb0258 100644
--- a/include/linux/icmpv6.h
+++ b/include/linux/icmpv6.h
@@ -76,7 +76,7 @@ struct icmp6hdr {
 #define icmp6_addrconf_other	icmp6_dataun.u_nd_ra.other
 #define icmp6_rt_lifetime	icmp6_dataun.u_nd_ra.rt_lifetime
 #define icmp6_router_pref	icmp6_dataun.u_nd_ra.router_pref
-};
+} __packed;
 
 #ifdef __KERNEL__
 #include <linux/skbuff.h>
diff --git a/include/linux/if_vlan.h b/include/linux/if_vlan.h
index 561e130..57cdb8c 100644
--- a/include/linux/if_vlan.h
+++ b/include/linux/if_vlan.h
@@ -39,7 +39,7 @@
 struct vlan_hdr {
 	__be16	h_vlan_TCI;
 	__be16	h_vlan_encapsulated_proto;
-};
+} __packed;
 
 /**
  *	struct vlan_ethhdr - vlan ethernet header (ethhdr + vlan_hdr)
diff --git a/include/linux/igmp.h b/include/linux/igmp.h
index 82de336..a17b50c 100644
--- a/include/linux/igmp.h
+++ b/include/linux/igmp.h
@@ -32,7 +32,7 @@ struct igmphdr {
 	__u8 code;		/* For newer IGMP */
 	__sum16 csum;
 	__be32 group;
-};
+} __packed;
 
 /* V3 group record types [grec_type] */
 #define IGMPV3_MODE_IS_INCLUDE		1
@@ -48,7 +48,7 @@ struct igmpv3_grec {
 	__be16	grec_nsrcs;
 	__be32	grec_mca;
 	__be32	grec_src[0];
-};
+} __packed;
 
 struct igmpv3_report {
 	__u8 type;
@@ -57,7 +57,7 @@ struct igmpv3_report {
 	__be16 resv2;
 	__be16 ngrec;
 	struct igmpv3_grec grec[0];
-};
+} __packed;
 
 struct igmpv3_query {
 	__u8 type;
@@ -78,7 +78,7 @@ struct igmpv3_query {
 	__u8 qqic;
 	__be16 nsrcs;
 	__be32 srcs[0];
-};
+} __packed;
 
 #define IGMP_HOST_MEMBERSHIP_QUERY	0x11	/* From RFC1112 */
 #define IGMP_HOST_MEMBERSHIP_REPORT	0x12	/* Ditto */
diff --git a/include/linux/in6.h b/include/linux/in6.h
index cba469b..15e3dbd 100644
--- a/include/linux/in6.h
+++ b/include/linux/in6.h
@@ -36,7 +36,7 @@ struct in6_addr {
 #define s6_addr			in6_u.u6_addr8
 #define s6_addr16		in6_u.u6_addr16
 #define s6_addr32		in6_u.u6_addr32
-};
+} __packed;
 
 /* IPv6 Wildcard Address (::) and Loopback Address (::1) defined in RFC2553
  * NOTE: Be aware the IN6ADDR_* constants and in6addr_* externals are defined
@@ -61,7 +61,7 @@ struct sockaddr_in6 {
 	__be32			sin6_flowinfo;  /* IPv6 flow information */
 	struct in6_addr		sin6_addr;      /* IPv6 address */
 	__u32			sin6_scope_id;  /* scope id (new in RFC2553) */
-};
+} __packed;
 
 struct ipv6_mreq {
 	/* IPv6 multicast address of group */
@@ -69,7 +69,7 @@ struct ipv6_mreq {
 
 	/* local IPv6 address of interface */
 	int		ipv6mr_ifindex;
-};
+} __packed;
 
 #define ipv6mr_acaddr	ipv6mr_multiaddr
 
@@ -83,7 +83,7 @@ struct in6_flowlabel_req {
 	__u16	flr_linger;
 	__u32	__flr_pad;
 	/* Options in format of IPV6_PKTOPTIONS */
-};
+} __packed;
 
 #define IPV6_FL_A_GET	0
 #define IPV6_FL_A_PUT	1
diff --git a/include/linux/ip.h b/include/linux/ip.h
index 7a3f2d3..85ad985 100644
--- a/include/linux/ip.h
+++ b/include/linux/ip.h
@@ -125,25 +125,25 @@ struct ip_auth_hdr {
 	__be32 spi;
 	__be32 seq_no;		/* Sequence number */
 	__u8  auth_data[0];	/* Variable len but >=4. Mind the 64 bit alignment! */
-};
+} __packed;
 
 struct ip_esp_hdr {
 	__be32 spi;
 	__be32 seq_no;		/* Sequence number */
 	__u8  enc_data[0];	/* Variable len but >=8. Mind the 64 bit alignment! */
-};
+} __packed;
 
 struct ip_comp_hdr {
 	__u8 nexthdr;
 	__u8 flags;
 	__be16 cpi;
-};
+} __packed;
 
 struct ip_beet_phdr {
 	__u8 nexthdr;
 	__u8 hdrlen;
 	__u8 padlen;
 	__u8 reserved;
-};
+} __packed;
 
 #endif	/* _LINUX_IP_H */
diff --git a/include/linux/ipv6.h b/include/linux/ipv6.h
index 9d44e45..31cc797 100644
--- a/include/linux/ipv6.h
+++ b/include/linux/ipv6.h
@@ -49,7 +49,7 @@ struct ipv6_rt_hdr {
 	 *	type specific data
 	 *	variable length field
 	 */
-};
+} __packed;
 
 
 struct ipv6_opt_hdr {
@@ -235,7 +235,7 @@ static inline struct ipv6hdr *ipipv6_hdr(const struct sk_buff *skb)
 
 static inline __u8 ipv6_tclass(const struct ipv6hdr *iph)
 {
-	return (ntohl(*(__be32 *)iph) >> 20) & 0xff;
+	return (ntohl(__get_unaligned_cpu32((__be32 *)iph)) >> 20) & 0xff;
 }
 
 /* 
diff --git a/include/linux/tcp.h b/include/linux/tcp.h
index e5ca4ff..fb6c2f9 100644
--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -64,9 +64,10 @@ struct tcphdr {
 union tcp_word_hdr { 
 	struct tcphdr hdr;
 	__be32 		  words[5];
-}; 
+} __packed;
 
-#define tcp_flag_word(tp) ( ((union tcp_word_hdr *)(tp))->words [3]) 
+#define tcp_flag_word2(tp) ( ((union tcp_word_hdr *)(tp))->words [3])
+#define tcp_flag_word(tp) ( __get_unaligned_cpu32(&(((union tcp_word_hdr *)(tp))->words [3])))
 
 enum { 
 	TCP_FLAG_CWR = __constant_cpu_to_be32(0x00800000),
diff --git a/include/net/flow_keys.h b/include/net/flow_keys.h
index 80461c1..ffd6fbd 100644
--- a/include/net/flow_keys.h
+++ b/include/net/flow_keys.h
@@ -10,7 +10,7 @@ struct flow_keys {
 		__be16 port16[2];
 	};
 	u8 ip_proto;
-};
+} __packed;
 
 extern bool skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow);
 #endif
diff --git a/include/net/ip6_checksum.h b/include/net/ip6_checksum.h
index bc1b0fd..caef125 100644
--- a/include/net/ip6_checksum.h
+++ b/include/net/ip6_checksum.h
@@ -45,6 +45,11 @@ static __inline__ __sum16 csum_ipv6_magic(const struct in6_addr *saddr,
 	__u32 uproto;
 	__u32 sum = (__force u32)csum;
 
+#ifdef _HAVE_ARCH_IPV6_CSUM_ALIGNED
+       if (((((unsigned int) saddr | (unsigned int) daddr)) & 3) == 0)
+               return csum_ipv6_magic_aligned(saddr,daddr,len,proto,csum);
+#endif
+
 	sum += (__force u32)saddr->s6_addr32[0];
 	carry = (sum < (__force u32)saddr->s6_addr32[0]);
 	sum += carry;
diff --git a/include/net/ipv6.h b/include/net/ipv6.h
index 01c34b3..c6e6737 100644
--- a/include/net/ipv6.h
+++ b/include/net/ipv6.h
@@ -105,7 +105,7 @@ struct frag_hdr {
 	__u8	reserved;
 	__be16	frag_off;
 	__be32	identification;
-};
+} __packed;
 
 #define	IP6_MF	0x0001
 
@@ -371,7 +371,7 @@ static inline bool __ipv6_prefix_equal(const __be32 *a1, const __be32 *a2,
 
 	/* check incomplete u32 in prefix */
 	pbi = prefixlen & 0x1f;
-	if (pbi && ((a1[pdw] ^ a2[pdw]) & htonl((0xffffffff) << (32 - pbi))))
+	if (pbi && ((__get_unaligned_cpu32(&a1[pdw]) ^ __get_unaligned_cpu32(&a2[pdw])) & htonl((0xffffffff) << (32 - pbi))))
 		return false;
 
 	return true;
@@ -474,7 +474,7 @@ static inline int __ipv6_addr_diff(const void *token1, const void *token2, int a
 	addrlen >>= 2;
 
 	for (i = 0; i < addrlen; i++) {
-		__be32 xb = a1[i] ^ a2[i];
+		__be32 xb = __get_unaligned_cpu32(&a1[i]) ^ __get_unaligned_cpu32(&a2[i]);
 		if (xb)
 			return i * 32 + 31 - __fls(ntohl(xb));
 	}
diff --git a/include/net/ndisc.h b/include/net/ndisc.h
index 96a3b5c..ae59543 100644
--- a/include/net/ndisc.h
+++ b/include/net/ndisc.h
@@ -64,18 +64,18 @@ struct nd_msg {
         struct icmp6hdr	icmph;
         struct in6_addr	target;
 	__u8		opt[0];
-};
+} __packed;
 
 struct rs_msg {
 	struct icmp6hdr	icmph;
 	__u8		opt[0];
-};
+} __packed;
 
 struct ra_msg {
         struct icmp6hdr		icmph;
 	__be32			reachable_time;
 	__be32			retrans_timer;
-};
+} __packed;
 
 struct nd_opt_hdr {
 	__u8		nd_opt_type;
@@ -134,10 +134,10 @@ static inline u32 ndisc_hashfn(const void *pkey, const struct net_device *dev, _
 {
 	const u32 *p32 = pkey;
 
-	return (((p32[0] ^ dev->ifindex) * hash_rnd[0]) +
-		(p32[1] * hash_rnd[1]) +
-		(p32[2] * hash_rnd[2]) +
-		(p32[3] * hash_rnd[3]));
+	return (((__get_unaligned_cpu32(&p32[0]) ^ dev->ifindex) * hash_rnd[0]) +
+		(__get_unaligned_cpu32(&p32[1]) * hash_rnd[1]) +
+		(__get_unaligned_cpu32(&p32[2]) * hash_rnd[2]) +
+		(__get_unaligned_cpu32(&p32[3]) * hash_rnd[3]));
 }
 
 static inline struct neighbour *__ipv6_neigh_lookup(struct neigh_table *tbl, struct net_device *dev, const void *pkey)
@@ -155,8 +155,8 @@ static inline struct neighbour *__ipv6_neigh_lookup(struct neigh_table *tbl, str
 	     n = rcu_dereference_bh(n->next)) {
 		u32 *n32 = (u32 *) n->primary_key;
 		if (n->dev == dev &&
-		    ((n32[0] ^ p32[0]) | (n32[1] ^ p32[1]) |
-		     (n32[2] ^ p32[2]) | (n32[3] ^ p32[3])) == 0) {
+		    ((n32[0] ^ __get_unaligned_cpu32(&p32[0])) | (n32[1] ^ __get_unaligned_cpu32(&p32[1])) |
+		     (n32[2] ^ __get_unaligned_cpu32(&p32[2])) | (n32[3] ^ __get_unaligned_cpu32(&p32[3]))) == 0) {
 			if (!atomic_inc_not_zero(&n->refcnt))
 				n = NULL;
 			break;
diff --git a/net/core/flow_dissector.c b/net/core/flow_dissector.c
index 466820b..f978bf9 100644
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -18,7 +18,10 @@ static void iph_to_flow_copy_addrs(struct flow_keys *flow, const struct iphdr *i
 {
 	BUILD_BUG_ON(offsetof(typeof(*flow), dst) !=
 		     offsetof(typeof(*flow), src) + sizeof(flow->src));
-	memcpy(&flow->src, &iph->saddr, sizeof(flow->src) + sizeof(flow->dst));
+	/*	memcpy(&flow->src, &iph->saddr, sizeof(flow->src) + sizeof(flow->dst)); */
+	flow->src = iph->saddr;
+	flow->dst = iph->daddr;
+
 }
 
 bool skb_flow_dissect(const struct sk_buff *skb, struct flow_keys *flow)
@@ -137,7 +140,7 @@ ipv6:
 		nhoff += poff;
 		ports = skb_header_pointer(skb, nhoff, sizeof(_ports), &_ports);
 		if (ports)
-			flow->ports = *ports;
+		  flow->ports = __get_unaligned_cpu32(ports);
 	}
 
 	return true;
diff --git a/net/core/secure_seq.c b/net/core/secure_seq.c
index 99b2596..2127551 100644
--- a/net/core/secure_seq.c
+++ b/net/core/secure_seq.c
@@ -7,6 +7,7 @@
 #include <linux/hrtimer.h>
 #include <linux/ktime.h>
 #include <linux/string.h>
+#include <linux/unaligned/packed_struct.h>
 
 #include <net/secure_seq.h>
 
@@ -46,7 +47,7 @@ __u32 secure_tcpv6_sequence_number(const __be32 *saddr, const __be32 *daddr,
 
 	memcpy(hash, saddr, 16);
 	for (i = 0; i < 4; i++)
-		secret[i] = net_secret[i] + (__force u32)daddr[i];
+	  secret[i] = net_secret[i] + (__force u32) __get_unaligned_cpu32(&daddr[i]);
 	secret[4] = net_secret[4] +
 		(((__force u16)sport << 16) + (__force u16)dport);
 	for (i = 5; i < MD5_MESSAGE_BYTES / 4; i++)
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index b0b39f6..80be008 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -3147,7 +3147,7 @@ found:
 
 	p = *head;
 	th2 = tcp_hdr(p);
-	tcp_flag_word(th2) |= flags & (TCP_FLAG_FIN | TCP_FLAG_PSH);
+	tcp_flag_word2(th2) = tcp_flag_word(th2) | flags & (TCP_FLAG_FIN | TCP_FLAG_PSH);
 
 out_check_final:
 	flush = len < mss;
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index c92c4da..f96bfc9 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -3869,13 +3869,13 @@ static bool tcp_parse_aligned_timestamp(struct tcp_sock *tp, const struct tcphdr
 {
 	const __be32 *ptr = (const __be32 *)(th + 1);
 
-	if (*ptr == htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16)
+	if (__get_unaligned_cpu32(ptr) == htonl((TCPOPT_NOP << 24) | (TCPOPT_NOP << 16)
 			  | (TCPOPT_TIMESTAMP << 8) | TCPOLEN_TIMESTAMP)) {
 		tp->rx_opt.saw_tstamp = 1;
 		++ptr;
-		tp->rx_opt.rcv_tsval = ntohl(*ptr);
+		tp->rx_opt.rcv_tsval = ntohl(__get_unaligned_cpu32(ptr));
 		++ptr;
-		tp->rx_opt.rcv_tsecr = ntohl(*ptr);
+		tp->rx_opt.rcv_tsecr = ntohl(__get_unaligned_cpu32(ptr));
 		return true;
 	}
 	return false;
diff --git a/net/ipv6/af_inet6.c b/net/ipv6/af_inet6.c
index f757e3b..2a716489 100644
--- a/net/ipv6/af_inet6.c
+++ b/net/ipv6/af_inet6.c
@@ -687,7 +687,7 @@ bool ipv6_opt_accepted(const struct sock *sk, const struct sk_buff *skb)
 		if ((opt->hop && (np->rxopt.bits.hopopts ||
 				  np->rxopt.bits.ohopopts)) ||
 		    ((IPV6_FLOWINFO_MASK &
-		      *(__be32 *)skb_network_header(skb)) &&
+		      __get_unaligned_cpu32((__be32 *)skb_network_header(skb))) &&
 		     np->rxopt.bits.rxflow) ||
 		    (opt->srcrt && (np->rxopt.bits.srcrt ||
 		     np->rxopt.bits.osrcrt)) ||
diff --git a/net/ipv6/datagram.c b/net/ipv6/datagram.c
index be2b67d6..19e7aa0 100644
--- a/net/ipv6/datagram.c
+++ b/net/ipv6/datagram.c
@@ -360,12 +360,12 @@ int ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len)
 				*(struct in6_addr *)(nh + serr->addr_offset);
 			if (np->sndflow)
 				sin->sin6_flowinfo =
-					(*(__be32 *)(nh + serr->addr_offset - 24) &
+					(__get_unaligned_cpu32((__be32 *)(nh + serr->addr_offset - 24)) &
 					 IPV6_FLOWINFO_MASK);
 			if (ipv6_addr_type(&sin->sin6_addr) & IPV6_ADDR_LINKLOCAL)
 				sin->sin6_scope_id = IP6CB(skb)->iif;
 		} else {
-			ipv6_addr_set_v4mapped(*(__be32 *)(nh + serr->addr_offset),
+			ipv6_addr_set_v4mapped(__get_unaligned_cpu32((__be32 *)(nh + serr->addr_offset)),
 					       &sin->sin6_addr);
 		}
 	}
@@ -493,7 +493,7 @@ int datagram_recv_ctl(struct sock *sk, struct msghdr *msg, struct sk_buff *skb)
 	}
 
 	if (np->rxopt.bits.rxflow && (*(__be32 *)nh & IPV6_FLOWINFO_MASK)) {
-		__be32 flowinfo = *(__be32 *)nh & IPV6_FLOWINFO_MASK;
+		__be32 flowinfo = __get_unaligned_cpu32((__be32 *)nh) & IPV6_FLOWINFO_MASK;
 		put_cmsg(msg, SOL_IPV6, IPV6_FLOWINFO, sizeof(flowinfo), &flowinfo);
 	}
 
@@ -588,7 +588,7 @@ int datagram_recv_ctl(struct sock *sk, struct msghdr *msg, struct sk_buff *skb)
 
 			sin6.sin6_family = AF_INET6;
 			sin6.sin6_addr = ipv6_hdr(skb)->daddr;
-			sin6.sin6_port = ports[1];
+			sin6.sin6_port = __get_unaligned_cpu16(&(ports[1]));
 			sin6.sin6_flowinfo = 0;
 			sin6.sin6_scope_id = 0;
 
@@ -680,12 +680,12 @@ int datagram_send_ctl(struct net *net, struct sock *sk,
 			}
 
 			if (fl6->flowlabel&IPV6_FLOWINFO_MASK) {
-				if ((fl6->flowlabel^*(__be32 *)CMSG_DATA(cmsg))&~IPV6_FLOWINFO_MASK) {
+				if ((fl6->flowlabel^__get_unaligned_cpu32((__be32 *)CMSG_DATA(cmsg)))&~IPV6_FLOWINFO_MASK) {
 					err = -EINVAL;
 					goto exit_f;
 				}
 			}
-			fl6->flowlabel = IPV6_FLOWINFO_MASK & *(__be32 *)CMSG_DATA(cmsg);
+			fl6->flowlabel = IPV6_FLOWINFO_MASK & __get_unaligned_cpu32((__be32 *)CMSG_DATA(cmsg));
 			break;
 
 		case IPV6_2292HOPOPTS:
diff --git a/net/ipv6/exthdrs.c b/net/ipv6/exthdrs.c
index fa3d9c3..fd0f487 100644
--- a/net/ipv6/exthdrs.c
+++ b/net/ipv6/exthdrs.c
@@ -622,7 +622,7 @@ static bool ipv6_hop_jumbo(struct sk_buff *skb, int optoff)
 		goto drop;
 	}
 
-	pkt_len = ntohl(*(__be32 *)(nh + optoff + 2));
+	pkt_len = ntohl(__get_unaligned_cpu32((__be32 *)(nh + optoff + 2)));
 	if (pkt_len <= IPV6_MAXPLEN) {
 		IP6_INC_STATS_BH(net, ipv6_skb_idev(skb),
 				 IPSTATS_MIB_INHDRERRORS);
diff --git a/net/ipv6/ip6_fib.c b/net/ipv6/ip6_fib.c
index 286acfc..81c9aa6 100644
--- a/net/ipv6/ip6_fib.c
+++ b/net/ipv6/ip6_fib.c
@@ -144,7 +144,7 @@ static __inline__ __be32 addr_bit_set(const void *token, int fn_bit)
 	 * See include/asm-generic/bitops/le.h.
 	 */
 	return (__force __be32)(1 << ((~fn_bit ^ BITOP_BE32_SWIZZLE) & 0x1f)) &
-	       addr[fn_bit >> 5];
+	       __get_unaligned_cpu32(&addr[fn_bit >> 5]);
 }
 
 static __inline__ struct fib6_node * node_alloc(void)
diff --git a/net/ipv6/reassembly.c b/net/ipv6/reassembly.c
index 4ff9af6..72b4b78 100644
--- a/net/ipv6/reassembly.c
+++ b/net/ipv6/reassembly.c
@@ -152,10 +152,10 @@ void ip6_frag_init(struct inet_frag_queue *q, void *a)
 	struct frag_queue *fq = container_of(q, struct frag_queue, q);
 	struct ip6_create_arg *arg = a;
 
-	fq->id = arg->id;
-	fq->user = arg->user;
-	fq->saddr = *arg->src;
-	fq->daddr = *arg->dst;
+	fq->id = __get_unaligned_cpu32(&arg->id);
+	fq->user = __get_unaligned_cpu32(&arg->user);
+	memcpy(&fq->saddr, arg->src, sizeof(struct in6_addr));
+	memcpy(&fq->daddr, arg->dst, sizeof(struct in6_addr));
 }
 EXPORT_SYMBOL(ip6_frag_init);
 
diff --git a/net/ipv6/route.c b/net/ipv6/route.c
index 070a3ce..3e350eb 100644
--- a/net/ipv6/route.c
+++ b/net/ipv6/route.c
@@ -947,7 +947,7 @@ void ip6_route_input(struct sk_buff *skb)
 		.flowi6_iif = skb->dev->ifindex,
 		.daddr = iph->daddr,
 		.saddr = iph->saddr,
-		.flowlabel = (* (__be32 *) iph) & IPV6_FLOWINFO_MASK,
+		.flowlabel = (__get_unaligned_cpu32(iph)) & IPV6_FLOWINFO_MASK,
 		.flowi6_mark = skb->mark,
 		.flowi6_proto = iph->nexthdr,
 	};
diff --git a/net/ipv6/xfrm6_policy.c b/net/ipv6/xfrm6_policy.c
index f8c4c08..8ce1aa6 100644
--- a/net/ipv6/xfrm6_policy.c
+++ b/net/ipv6/xfrm6_policy.c
@@ -166,8 +166,8 @@ _decode_session6(struct sk_buff *skb, struct flowi *fl, int reverse)
 			     pskb_may_pull(skb, nh + offset + 4 - skb->data))) {
 				__be16 *ports = (__be16 *)exthdr;
 
-				fl6->fl6_sport = ports[!!reverse];
-				fl6->fl6_dport = ports[!reverse];
+				fl6->fl6_sport = __get_unaligned_cpu16(&ports[!!reverse]);
+				fl6->fl6_dport = __get_unaligned_cpu16(&ports[!reverse]);
 			}
 			fl6->flowi6_proto = nexthdr;
 			return;
diff --git a/net/netfilter/xt_LOG.c b/net/netfilter/xt_LOG.c
index 91e9af4..8aee0ec 100644
--- a/net/netfilter/xt_LOG.c
+++ b/net/netfilter/xt_LOG.c
@@ -519,9 +519,9 @@ static void dump_ipv6_packet(struct sbuff *m,
 	/* Max length: 44 "LEN=65535 TC=255 HOPLIMIT=255 FLOWLBL=FFFFF " */
 	sb_add(m, "LEN=%Zu TC=%u HOPLIMIT=%u FLOWLBL=%u ",
 	       ntohs(ih->payload_len) + sizeof(struct ipv6hdr),
-	       (ntohl(*(__be32 *)ih) & 0x0ff00000) >> 20,
+	       (ntohl(__get_unaligned_cpu32((__be32 *)ih)) & 0x0ff00000) >> 20,
 	       ih->hop_limit,
-	       (ntohl(*(__be32 *)ih) & 0x000fffff));
+	       (ntohl(__get_unaligned_cpu32((__be32 *)ih)) & 0x000fffff));
 
 	fragment = 0;
 	ptr = ip6hoff + sizeof(struct ipv6hdr);
diff --git a/net/sched/cls_u32.c b/net/sched/cls_u32.c
index d45373f..4c713b4 100644
--- a/net/sched/cls_u32.c
+++ b/net/sched/cls_u32.c
@@ -142,7 +142,7 @@ next_knode:
 			data = skb_header_pointer(skb, toff, 4, &hdata);
 			if (!data)
 				goto out;
-			if ((*data ^ key->val) & key->mask) {
+			if ((__get_unaligned_cpu32(data) ^ key->val) & key->mask) {
 				n = n->next;
 				goto next_knode;
 			}
@@ -193,7 +193,7 @@ check_terminal:
 						  &hdata);
 			if (!data)
 				goto out;
-			sel = ht->divisor & u32_hash_fold(*data, &n->sel,
+			sel = ht->divisor & u32_hash_fold(__get_unaligned_cpu32(data), &n->sel,
 							  n->fshift);
 		}
 		if (!(n->sel.flags & (TC_U32_VAROFFSET | TC_U32_OFFSET | TC_U32_EAT)))
@@ -209,7 +209,7 @@ check_terminal:
 							  2, &hdata);
 				if (!data)
 					goto out;
-				off2 += ntohs(n->sel.offmask & *data) >>
+				off2 += ntohs(n->sel.offmask & __get_unaligned_cpu16(data)) >>
 					n->sel.offshift;
 			}
 			off2 &= ~3;
diff --git a/net/sched/sch_api.c b/net/sched/sch_api.c
index a08b4ab..cde525d 100644
--- a/net/sched/sch_api.c
+++ b/net/sched/sch_api.c
@@ -1658,7 +1658,7 @@ done:
 int tc_classify_compat(struct sk_buff *skb, const struct tcf_proto *tp,
 		       struct tcf_result *res)
 {
-	__be16 protocol = skb->protocol;
+	__be16 protocol = __get_unaligned_cpu16(&skb->protocol);
 	int err;
 
 	for (; tp; tp = tp->next) {
diff --git a/net/xfrm/xfrm_input.c b/net/xfrm/xfrm_input.c
index ab2bb42..e32ad98 100644
--- a/net/xfrm/xfrm_input.c
+++ b/net/xfrm/xfrm_input.c
@@ -52,6 +52,7 @@ int xfrm_parse_spi(struct sk_buff *skb, u8 nexthdr, __be32 *spi, __be32 *seq)
 {
 	int offset, offset_seq;
 	int hlen;
+	__be32 *pspi, *pseq;
 
 	switch (nexthdr) {
 	case IPPROTO_AH:
@@ -77,8 +78,10 @@ int xfrm_parse_spi(struct sk_buff *skb, u8 nexthdr, __be32 *spi, __be32 *seq)
 	if (!pskb_may_pull(skb, hlen))
 		return -EINVAL;
 
-	*spi = *(__be32*)(skb_transport_header(skb) + offset);
-	*seq = *(__be32*)(skb_transport_header(skb) + offset_seq);
+	pspi = (__be32*)(skb_transport_header(skb) + offset);
+	pseq = (__be32*)(skb_transport_header(skb) + offset_seq);
+	*spi = __get_unaligned_cpu32(pspi);
+	*seq = __get_unaligned_cpu32(pseq);
 	return 0;
 }
 
